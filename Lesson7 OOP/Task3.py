# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения
# до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
# двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод
# позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:

    def __init__(self, number):
            self.number = int(number)

    def __str__(self):
        return str(self.number)

    def __add__(self,other):
        return Cell(self.number+other.number)
    def __sub__(self,other):
        if self.number-other.number<0:
            return 'Разность ячеек меньше 0'
        else:
            return Cell(self.number-other.number)

    def __mul__(self,other):
        return (Cell(self.number * other.number))

    def __truediv__(self,other):
        return Cell(self.number / other.number)

    def __round__(self):
        return round(self.number,0)


    def __mod__(self, other):
        return self.number % other.number

    def __floordiv__(self, number):
        return divmod(self.number, number)


    def make_order(self,rows):
        for i in range(self.number// rows):
            print('*' * rows,end = '\n' )
        print('*' * (self.number % rows))




cell_1 = Cell(7)
cell_2 = Cell(10)
print(f'Сумма ячеек : {cell_1+cell_2}')
print(f'Разность ячеек : {cell_1-cell_2}')
print(f'Произведение ячеек : {cell_1*cell_2}')
print(f'Частное ячеек : {round(cell_1/cell_2)}')
print(f'Остаток от деления ячеек : {(cell_1%cell_2)}')
cell_1.make_order(2)